
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Neon Tic-Tac-Toe</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@500&display=swap');

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Orbitron', sans-serif;
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);
      overflow: hidden;
      color: #00fff7;
    }

    .container {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 20px;
      padding: 30px;
      text-align: center;
      backdrop-filter: blur(20px);
      box-shadow: 0 0 25px #00fff7, 0 0 60px #00fff7 inset;
      animation: float 5s infinite ease-in-out alternate;
    }

    @keyframes float {
      0% { transform: translateY(0); }
      100% { transform: translateY(-10px); }
    }

    h1 {
      font-size: 2.5rem;
      margin-bottom: 10px;
      color: #00fff7;
      text-shadow: 0 0 10px #00fff7;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 90px);
      gap: 15px;
      margin: 20px auto;
      justify-content: center;
    }

    .cell {
      width: 90px;
      height: 90px;
      font-size: 2.5rem;
      border-radius: 15px;
      background: rgba(255, 255, 255, 0.08);
      box-shadow: 0 0 10px #00fff7;
      color: #00fff7;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      transition: all 0.3s ease;
      user-select: none;
    }

    .cell:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: scale(1.1);
    }

    .cell.winner {
      background: #00fff7;
      color: #000;
      font-weight: bold;
      animation: blink 1s infinite alternate;
    }

    @keyframes blink {
      0% { box-shadow: 0 0 10px #00fff7; }
      100% { box-shadow: 0 0 25px #00fff7, 0 0 40px #00fff7 inset; }
    }

    .status {
      font-size: 1.3rem;
      margin: 10px 0;
      color: #fff;
      text-shadow: 0 0 8px #00fff7;
      transition: all 0.3s ease;
    }

    .buttons {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 15px;
      margin-top: 20px;
    }

    button {
      padding: 10px 25px;
      border: none;
      border-radius: 30px;
      background: #00fff7;
      color: #000;
      font-weight: bold;
      cursor: pointer;
      box-shadow: 0 0 15px #00fff7, 0 0 30px #00fff7 inset;
      transition: transform 0.3s ease;
    }

    button:hover {
      transform: scale(1.1);
      background: #00e0d1;
    }

    @media (max-width: 500px) {
      .board {
        grid-template-columns: repeat(3, 70px);
        gap: 10px;
      }

      .cell {
        width: 70px;
        height: 70px;
        font-size: 2rem;
      }

      h1 {
        font-size: 2rem;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Neon Tic Tac Toe</h1>
    <div class="buttons">
      <button id="toggleMode">Play with AI ü§ñ</button>
      <button id="restart">Restart üîÅ</button>
    </div>
    <div class="status" id="status">X's Turn</div>
    <div class="board" id="board"></div>
  </div>

  <!-- üîä SOUND EFFECTS -->
  <audio id="clickSound" src="https://www.soundjay.com/button/sounds/button-16.mp3" preload="auto"></audio>
  <audio id="winSound" src="https://www.soundjay.com/button/sounds/button-10.mp3" preload="auto"></audio>
  <audio id="drawSound" src="https://www.soundjay.com/button/sounds/button-4.mp3" preload="auto"></audio>

  <script>
    const board = document.getElementById("board");
    const statusText = document.getElementById("status");
    const restartBtn = document.getElementById("restart");
    const toggleModeBtn = document.getElementById("toggleMode");

    const clickSound = document.getElementById("clickSound");
    const winSound = document.getElementById("winSound");
    const drawSound = document.getElementById("drawSound");

    let cells = Array(9).fill("");
    let currentPlayer = "X";
    let isGameActive = true;
    let isAIMode = false;

    const winningCombos = [
      [0,1,2],[3,4,5],[6,7,8],
      [0,3,6],[1,4,7],[2,5,8],
      [0,4,8],[2,4,6]
    ];

    function renderBoard() {
      board.innerHTML = "";
      cells.forEach((cell, i) => {
        const div = document.createElement("div");
        div.classList.add("cell");
        div.setAttribute("data-index", i);
        div.textContent = cell;
        div.addEventListener("click", handleClick);
        board.appendChild(div);
      });
    }

    function handleClick(e) {
      const index = e.target.getAttribute("data-index");
      if (!isGameActive || cells[index] !== "") return;

      cells[index] = currentPlayer;
      clickSound.play();
      renderBoard();
      checkGame();

      if (isAIMode && currentPlayer === "X" && isGameActive) {
        setTimeout(makeAIMove, 400);
      }
    }

    function makeAIMove() {
      const empty = cells.map((val, i) => val === "" ? i : null).filter(i => i !== null);
      if (empty.length === 0) return;

      const random = empty[Math.floor(Math.random() * empty.length)];
      cells[random] = "O";
      clickSound.play();
      renderBoard();
      checkGame();
    }

    function checkGame() {
      for (const [a, b, c] of winningCombos) {
        if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {
          isGameActive = false;
          winSound.play();
          statusText.textContent = `${cells[a]} Wins! üéâ`;
          highlightCells([a, b, c]);
          return;
        }
      }

      if (!cells.includes("")) {
        isGameActive = false;
        drawSound.play();
        statusText.textContent = "It's a Draw! ü§ù";
        return;
      }

      currentPlayer = currentPlayer === "X" ? "O" : "X";
      if (!isAIMode || currentPlayer === "X") {
        statusText.textContent = `${currentPlayer}'s Turn`;
      }
    }

    function highlightCells(indices) {
      indices.forEach(i => {
        const cell = board.querySelector(`[data-index="${i}"]`);
        cell.classList.add("winner");
      });
    }

    function restartGame() {
      cells = Array(9).fill("");
      currentPlayer = "X";
      isGameActive = true;
      statusText.textContent = "X's Turn";
      renderBoard();
    }

    toggleModeBtn.addEventListener("click", () => {
      isAIMode = !isAIMode;
      toggleModeBtn.textContent = isAIMode ? "Play with Friend üë•" : "Play with AI ü§ñ";
      restartGame();
    });

    restartBtn.addEventListener("click", restartGame);

    renderBoard();
  </script>
</body>
</html>
